// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"kvm-agent/internal/models"
)

func newGuestInfo(db *gorm.DB, opts ...gen.DOOption) guestInfo {
	_guestInfo := guestInfo{}

	_guestInfo.guestInfoDo.UseDB(db, opts...)
	_guestInfo.guestInfoDo.UseModel(&models.GuestInfo{})

	tableName := _guestInfo.guestInfoDo.TableName()
	_guestInfo.ALL = field.NewAsterisk(tableName)
	_guestInfo.Id = field.NewUint(tableName, "id")
	_guestInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_guestInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_guestInfo.DeletedAt = field.NewTime(tableName, "deleted_at")
	_guestInfo.UUID = field.NewString(tableName, "uuid")
	_guestInfo.CpuDesc = field.NewString(tableName, "cpu_desc")
	_guestInfo.MemDesc = field.NewString(tableName, "mem_desc")
	_guestInfo.DiskDesc = field.NewString(tableName, "disk_desc")
	_guestInfo.NetDesc = field.NewString(tableName, "net_desc")
	_guestInfo.UseGzip = field.NewBool(tableName, "use_gzip")
	_guestInfo.IsOnline = field.NewBool(tableName, "is_online")

	_guestInfo.fillFieldMap()

	return _guestInfo
}

type guestInfo struct {
	guestInfoDo guestInfoDo

	ALL       field.Asterisk
	Id        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Time
	UUID      field.String
	CpuDesc   field.String
	MemDesc   field.String
	DiskDesc  field.String
	NetDesc   field.String
	UseGzip   field.Bool
	IsOnline  field.Bool

	fieldMap map[string]field.Expr
}

func (g guestInfo) Table(newTableName string) *guestInfo {
	g.guestInfoDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g guestInfo) As(alias string) *guestInfo {
	g.guestInfoDo.DO = *(g.guestInfoDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *guestInfo) updateTableName(table string) *guestInfo {
	g.ALL = field.NewAsterisk(table)
	g.Id = field.NewUint(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewTime(table, "deleted_at")
	g.UUID = field.NewString(table, "uuid")
	g.CpuDesc = field.NewString(table, "cpu_desc")
	g.MemDesc = field.NewString(table, "mem_desc")
	g.DiskDesc = field.NewString(table, "disk_desc")
	g.NetDesc = field.NewString(table, "net_desc")
	g.UseGzip = field.NewBool(table, "use_gzip")
	g.IsOnline = field.NewBool(table, "is_online")

	g.fillFieldMap()

	return g
}

func (g *guestInfo) WithContext(ctx context.Context) IGuestInfoDo {
	return g.guestInfoDo.WithContext(ctx)
}

func (g guestInfo) TableName() string { return g.guestInfoDo.TableName() }

func (g guestInfo) Alias() string { return g.guestInfoDo.Alias() }

func (g guestInfo) Columns(cols ...field.Expr) gen.Columns { return g.guestInfoDo.Columns(cols...) }

func (g *guestInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *guestInfo) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.Id
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["uuid"] = g.UUID
	g.fieldMap["cpu_desc"] = g.CpuDesc
	g.fieldMap["mem_desc"] = g.MemDesc
	g.fieldMap["disk_desc"] = g.DiskDesc
	g.fieldMap["net_desc"] = g.NetDesc
	g.fieldMap["use_gzip"] = g.UseGzip
	g.fieldMap["is_online"] = g.IsOnline
}

func (g guestInfo) clone(db *gorm.DB) guestInfo {
	g.guestInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g guestInfo) replaceDB(db *gorm.DB) guestInfo {
	g.guestInfoDo.ReplaceDB(db)
	return g
}

type guestInfoDo struct{ gen.DO }

type IGuestInfoDo interface {
	gen.SubQuery
	Debug() IGuestInfoDo
	WithContext(ctx context.Context) IGuestInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGuestInfoDo
	WriteDB() IGuestInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGuestInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGuestInfoDo
	Not(conds ...gen.Condition) IGuestInfoDo
	Or(conds ...gen.Condition) IGuestInfoDo
	Select(conds ...field.Expr) IGuestInfoDo
	Where(conds ...gen.Condition) IGuestInfoDo
	Order(conds ...field.Expr) IGuestInfoDo
	Distinct(cols ...field.Expr) IGuestInfoDo
	Omit(cols ...field.Expr) IGuestInfoDo
	Join(table schema.Tabler, on ...field.Expr) IGuestInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGuestInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGuestInfoDo
	Group(cols ...field.Expr) IGuestInfoDo
	Having(conds ...gen.Condition) IGuestInfoDo
	Limit(limit int) IGuestInfoDo
	Offset(offset int) IGuestInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGuestInfoDo
	Unscoped() IGuestInfoDo
	Create(values ...*models.GuestInfo) error
	CreateInBatches(values []*models.GuestInfo, batchSize int) error
	Save(values ...*models.GuestInfo) error
	First() (*models.GuestInfo, error)
	Take() (*models.GuestInfo, error)
	Last() (*models.GuestInfo, error)
	Find() ([]*models.GuestInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GuestInfo, err error)
	FindInBatches(result *[]*models.GuestInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.GuestInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGuestInfoDo
	Assign(attrs ...field.AssignExpr) IGuestInfoDo
	Joins(fields ...field.RelationField) IGuestInfoDo
	Preload(fields ...field.RelationField) IGuestInfoDo
	FirstOrInit() (*models.GuestInfo, error)
	FirstOrCreate() (*models.GuestInfo, error)
	FindByPage(offset int, limit int) (result []*models.GuestInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGuestInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g guestInfoDo) Debug() IGuestInfoDo {
	return g.withDO(g.DO.Debug())
}

func (g guestInfoDo) WithContext(ctx context.Context) IGuestInfoDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g guestInfoDo) ReadDB() IGuestInfoDo {
	return g.Clauses(dbresolver.Read)
}

func (g guestInfoDo) WriteDB() IGuestInfoDo {
	return g.Clauses(dbresolver.Write)
}

func (g guestInfoDo) Session(config *gorm.Session) IGuestInfoDo {
	return g.withDO(g.DO.Session(config))
}

func (g guestInfoDo) Clauses(conds ...clause.Expression) IGuestInfoDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g guestInfoDo) Returning(value interface{}, columns ...string) IGuestInfoDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g guestInfoDo) Not(conds ...gen.Condition) IGuestInfoDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g guestInfoDo) Or(conds ...gen.Condition) IGuestInfoDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g guestInfoDo) Select(conds ...field.Expr) IGuestInfoDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g guestInfoDo) Where(conds ...gen.Condition) IGuestInfoDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g guestInfoDo) Order(conds ...field.Expr) IGuestInfoDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g guestInfoDo) Distinct(cols ...field.Expr) IGuestInfoDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g guestInfoDo) Omit(cols ...field.Expr) IGuestInfoDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g guestInfoDo) Join(table schema.Tabler, on ...field.Expr) IGuestInfoDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g guestInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGuestInfoDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g guestInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IGuestInfoDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g guestInfoDo) Group(cols ...field.Expr) IGuestInfoDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g guestInfoDo) Having(conds ...gen.Condition) IGuestInfoDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g guestInfoDo) Limit(limit int) IGuestInfoDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g guestInfoDo) Offset(offset int) IGuestInfoDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g guestInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGuestInfoDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g guestInfoDo) Unscoped() IGuestInfoDo {
	return g.withDO(g.DO.Unscoped())
}

func (g guestInfoDo) Create(values ...*models.GuestInfo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g guestInfoDo) CreateInBatches(values []*models.GuestInfo, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g guestInfoDo) Save(values ...*models.GuestInfo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g guestInfoDo) First() (*models.GuestInfo, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.GuestInfo), nil
	}
}

func (g guestInfoDo) Take() (*models.GuestInfo, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.GuestInfo), nil
	}
}

func (g guestInfoDo) Last() (*models.GuestInfo, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.GuestInfo), nil
	}
}

func (g guestInfoDo) Find() ([]*models.GuestInfo, error) {
	result, err := g.DO.Find()
	return result.([]*models.GuestInfo), err
}

func (g guestInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GuestInfo, err error) {
	buf := make([]*models.GuestInfo, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g guestInfoDo) FindInBatches(result *[]*models.GuestInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g guestInfoDo) Attrs(attrs ...field.AssignExpr) IGuestInfoDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g guestInfoDo) Assign(attrs ...field.AssignExpr) IGuestInfoDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g guestInfoDo) Joins(fields ...field.RelationField) IGuestInfoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g guestInfoDo) Preload(fields ...field.RelationField) IGuestInfoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g guestInfoDo) FirstOrInit() (*models.GuestInfo, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.GuestInfo), nil
	}
}

func (g guestInfoDo) FirstOrCreate() (*models.GuestInfo, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.GuestInfo), nil
	}
}

func (g guestInfoDo) FindByPage(offset int, limit int) (result []*models.GuestInfo, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g guestInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g guestInfoDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g guestInfoDo) Delete(models ...*models.GuestInfo) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *guestInfoDo) withDO(do gen.Dao) *guestInfoDo {
	g.DO = *do.(*gen.DO)
	return g
}
